#################################归并排序###################################
#include <iostream>
#include <algorithm>
using namespace std;
const int N = 10;
int a[N] = { 4,6,2,8,9,1 };
int b[N]; 

void MergeSort(int* a, int l, int r)
{
    if (r == l)return;

    int mid = (l + r) >> 1;
    MergeSort(a, l, mid);
    MergeSort(a, mid + 1, r);

    //int b[N];
    //memset(b, 0, sizeof(b));
    int pl = l, pr = mid + 1, pb = l; 
    while (pl <= mid || pr <= r)
    {
        if (pl > mid)    //左边已经放完
        {
            b[pb++] = a[pr++];
        }
        else if (pr > r)   //右边已经放完
        {
            b[pb++] = a[pl++];
        }
        else   //两边都没放完
        {
            if (a[pl] < a[pr])
            {
                b[pb++] = a[pl++];
            }
            else
            {
                b[pb++] = a[pr++];
            }
        }
    }
    for (int i = 0; i <= r; ++i)
    {
        a[i] = b[i];  //复制回去
    }
}
int main()
{
    MergeSort(a, 0, 5);
    for (int i = 0; i <= 5; i++)
    {
        cout << a[i] << endl;
    }
}

###################################快速排序#########################################
#include <iostream>
#include <algorithm>
using namespace std;
const int N = 10;
int a[N] = { 4,6,2,8,9,1 };
int b[N]; 

int Partition(int* a, int l, int r)
{
    //设a[r]为基准，这一次Partition会将a[r]放到正确的位置上
    int pivot = a[r];
    int i = l, j = r;
    while (i < j)
    {
        while (i < j && a[i] <= pivot)i++;
        while (i < j && a[j] >= pivot)j--;
        if (i < j)swap(a[i], a[j]);
        else swap(a[i], a[r]);
    }
    return i;
}
void QuickSort(int* a, int l, int r)
{
    if (l < r)
    {
        int mid = Partition(a, l, r);
        QuickSort(a, l, mid - 1);
        QuickSort(a, mid + 1, r);
    }
}
int main()
{
    QuickSort(a, 0, 5);
    for (int i = 0; i <= 5; i++)
    {
        cout << a[i] << endl;
    }
}
