##################################一维差分#########################################################
//洛谷P2367语文成绩
#include <iostream>
#include <cstring>
using namespace std;
using ll = long long;
const int N = 5e6+5;
int a[N], D[N];

int main()
{
    int n, p;
    cin >> n >> p;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        D[i] = a[i] - a[i - 1];               //核心思想是把求a[k]转化为求D的前缀和
    }
    for (int i = 1; i <= p; i++)
    {
        int L, R, x;
        cin >> L >> R >> x;
        D[L] += x;                              //差分数组
        D[R + 1] -= x;
    }
    int ans = 100;
    for (int i = 1; i <= n; i++)
    {
        a[i] = a[i - 1] + D[i];
        ans = min(ans, a[i]);
    }
    cout << ans;
    return 0;
}
一维差分：对“区间修改”很高效，但对“单点查询”并不高效。



####################################二维差分############################################################
#include <iostream>
using namespace std;
const int N = 1e5 + 5;
int a[1005][1005], D[1005][1005];

int main() {
	int n, m; cin >> n >> m;
	while (m--)
	{
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		D[x1][y1]++; D[x2 + 1][y2 + 1]++;
		D[x1][y2 + 1]--; D[x2 + 1][y1]--;
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			a[i][j] = D[i][j] + a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];
                        //D[i][j] += D[i - 1][j] + D[i][j - 1] - D[i - 1][j - 1];                 把用过的D[][]看作a[][]，不用另外定义a[][]了，大大节省空间
			cout << a[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}
想不清楚原理时，想想我画的那个图。差分的核心还是“前缀和的逆运算”

